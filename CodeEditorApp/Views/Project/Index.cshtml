@model CodeEditorApp.Models.ViewModels.ProjectViewModel

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/UserHome/_Layout.cshtml";
}
<head>

</head>
<script src="https://use.fontawesome.com/3e0cecfe87.js"></script>
<body>
    <!--Project body starts-->
    <div class="row container padding-for-container project-body">
        <!--Project folders and file tree starts-->
        <div class="col-md-2 document-list padding-for-container">
            <div class="row container padding-for-container userhome-body">
                <ul id="tree2">
                    <li>@Model.SolutionFolder.Name</li>

                    @if (Model.SolutionFolder.SubFolders != null)
                    {
                        <ul>


                            @foreach (CodeEditorApp.Models.ViewModels.FolderViewModel item in Model.SolutionFolder.SubFolders)
                {
                                <li>
                                    <a href="#">@item.Name</a>
                                    @ShowSubItems(item.SubFolders);

                                </li>
                            }
                        </ul>
                    }
                </ul>
                    @helper ShowSubItems(List<CodeEditorApp.Models.ViewModels.FolderViewModel> folders)
                    {
                        <ul>

                            @foreach (CodeEditorApp.Models.ViewModels.FolderViewModel item in folders)
                            {
                                <li>
                                    @item.Name
                                    @ShowSubItems(item.SubFolders)

                                    @if (item.Files != null)
                                    {
                                        <ul>
                                            @foreach (CodeEditorApp.Models.ViewModels.FileViewModel file in item.Files)
                                            {
                                                <li>@file.name</li>
                                            }
                                        </ul>
                                    }
                                </li>
                            }
                        </ul>
                    }

            </div>
        </div>

        <!--Project folders and file tree ends-->
        <!--File editor starts-->
        <div class="col-md-9 project-editor ">
         <!--ViewBag for storing the project code-->
            <div id="editor">
                @ViewBag.Code
            </div>
            <div id="color"><input type="button" value="Change Color" /></div>
            <div id="syntax">
                <select>
                    <option value="C#">Csharp</option>
                    <option value="Html">Html</option>
                    <option value="JavaScript">JavaScript</option>
                    <option value="TooDoo">TBD</option>
                </select>
            </div>

         
            @section scripts
 {
                <script src="~/3rdparty/src/ace.js" type="text/javascript" charset="utf-8"></script>
                <script src="~/Scripts/jquery.signalR-2.2.1.js"></script>
                <script src="~/signalr/hubs"></script>

                <script>
                //Get the DocumentID from the Controller class
                var documentID = @ViewBag.DocumentID;
                //Start the Ace editor
                var editor = ace.edit("editor");
                editor.setTheme("ace/theme/monokai");
                //Set the Editor in Javascript mode
                editor.getSession().setMode("ace/mode/javascript");
                $("form").submit(function () {
                $("#hidden_editor").val(editor.getSession().getValue());
                });
                var userName = @Html.Raw(Json.Encode(ViewBag.UserName));
                //Start the SignalR Hub
                var myHub1 = $.connection.myHub1;
                //Bool so we don't get stuck in a loop
                var silent = false;
                //What happens every time someone makes changes to a document with more than one user
                myHub1.client.onChange = function (changeData) {
                console.log(changeData);
                silent = true;
                editor.getSession().getDocument().applyDelta(changeData);
                myHub1.server.send($('#displayname').val(), $('#update').val());
                silent = false;
    };
                //What happens after client sends data
                $.connection.hub.start().done(function () {
                myHub1.server.joinDocument(documentID);
                editor.on("change", function (obj) {
                    if(silent){
                    return;
                    }
                //Sends the Object from Ace Editor(Position of change, what changed)
                console.log(obj);
                myHub1.server.onChange(obj, documentID);

 
               
        });
    });
                </script>
                <script>
                    $(function () {
                        // Reference the auto-generated proxy for the hub.
                        var chat = $.connection.myHub1;

                        // Create a function that the hub can call back to display messages.
                        chat.client.addNewMessageToPage = function (name, message) {
                            // Add the message to the page.
                            $('#discussion1').replaceWith('<li><strong>' + htmlEncode(name)
                                + '</strong>: ' + htmlEncode(message) +  '</li>');
                        };
                        //Set the name of the user
                        $('#displayname').val(userName);
                        //Set the message that displays on update
                        $('#update').val('Made the last change');
                        // Set initial focus to message input box.
                        //$('#message').focus();
                        // Start the connection.
                        $.connection.hub.start().done(function () {
                            //$('#sendmessage').click(function () {
                            //    // Call the Send method on the hub.
                            //    myHub1.server.send($('#displayname').val(), $('#message').val());
                            //    // Clear text box and reset focus for next comment.
                            //    $('#message').val('').focus();
                            //});
                        });
                    });
                    // This optional function html-encodes messages for display in the page.
                    function htmlEncode(value) {
                        var encodedValue = $('<div />').text(value).html();
                        return encodedValue;
                    }
                </script>
}

            <div class="project-update">
                @*<p class="l-text-user">Updates</p>*@
                <input class="hover-user" type="hidden" id="displayname" />
                <input class="hover-user" type="hidden" id="update" />
                <ul class="hover-user" id="discussion1"></ul>
            </div>
        </div>
        <!--File editor ends-->
        <!--Pop-out nav start-->
            <div id="project-chat" class="sidenav padding-for-container">
                <h2>Chat</h2>
                <div class="container">
                    <input type="text" id="message" />
                    <input type="button" id="sendmessage" value="Send" />
                    <input type="hidden" id="displayname" />
                    <ul class="hover-user" id="discussion"></ul>
                </div>
                @section scriptsComment {
                    <!--Script references. -->
                    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
                    <!--Reference the SignalR library. -->
                    <script src="~/Scripts/jquery.signalR-2.1.0.min.js"></script>
                    <!--Reference the autogenerated SignalR hub script. -->
                    <script src="~/signalr/hubs"></script>
                    <!--SignalR script to update the chat page and send messages.-->
                    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };
            // Get the user name and store it to prepend to messages.
            $('#displayname').val(@Html.Raw(Json.Encode(ViewBag.UserName)));
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
                    </script>
                }
                
            </div>
            <div id="project-members" class="sidenav padding-for-container">
                <h3>Members</h3>
                <ul>
                    <!--Show the list of members in a project if any-->
                    @if (Model.Members != null)
                    {
                        foreach (CodeEditorApp.Models.ViewModels.UserViewModel user in Model.Members)
                        {
                            <li>@user.UserName</li>
                        }
                    }
                </ul>
                <div id="add-member"><input type="button" value="Add new member" /></div>
                <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam.</p>
            </div>
            <div id="project-goals" class="sidenav padding-for-container">
                <h3>Goals</h3>
                <div>
                    <dl>
                        <dt>GOAL1</dt>
                        <dd>objective</dd>
                        <dt>GOAL2/dt>
                        <dd>objective</dd>
                    </dl>
                </div>
            </div>
        <!--Pop-out nav ends -->
        <!--Action nav starts -->
        <div class="col-md-1 project-actions">
            <ul>
                <li><span onclick="closeAllNavs()" class="clickable-icon"><i class="fa fa-code fa-3x" aria-hidden="true"></i></span></li>
                <li><span onclick="openNav('project-chat');" class="clickable-icon"><i class="glyphicon glyphicon-comment fa-3x" aria-hidden="true"></i></span></li>
                <li><span onclick="openNav('project-members');" class="clickable-icon"><i class="fa fa-users fa-3x" aria-hidden="true"></i></span></li>
                <li><span onclick="openNav('project-goals')" class="clickable-icon"><i class="fa fa-check-square-o fa-3x" aria-hidden="true"></i></span></li>
            </ul>
        </div>
        <!--Action nav ends -->
    </div>
    <!--Project body ends-->
    <script>
/*þarf að færa*/
        function openNav(name) {
            document.getElementById(name).style.width = "300px";/* Set the width of the side navigation to 250px */
            if (name != "project-chat")
            {
                closeNav("project-chat");
            }
            if (name != "project-members")
            {
                closeNav("project-members");
            }
            if (name != "project-goals")
            {
                closeNav("project-goals");
            }
        }

        /* Set the width of the side navigation to 0 */
        function closeNav(name) {
            document.getElementById(name).style.width = "0";
        }

        function closeAllNavs()
        {
            closeNav("project-chat");
            closeNav("project-members");
            closeNav("project-goals");
        }

        $.fn.extend({
            treed: function (o) {

                var openedClass = 'glyphicon-minus-sign';
                var closedClass = 'glyphicon-plus-sign';

                if (typeof o != 'undefined') {
                    if (typeof o.openedClass != 'undefined') {
                        openedClass = o.openedClass;
                    }
                    if (typeof o.closedClass != 'undefined') {
                        closedClass = o.closedClass;
                    }
                };

                //initialize each of the top levels
                var tree = $(this);
                tree.addClass("tree");
                tree.find('li').has("ul").each(function () {
                    var branch = $(this); //li with children ul
                    branch.prepend("<i class='indicator glyphicon " + closedClass + "'></i>");
                    branch.addClass('branch');
                    branch.on('click', function (e) {
                        if (this == e.target) {
                            var icon = $(this).children('i:first');
                            icon.toggleClass(openedClass + " " + closedClass);
                            $(this).children().children().toggle();
                        }
                    })
                    branch.children().children().toggle();
                });
                //fire event from the dynamically added icon
                tree.find('.branch .indicator').each(function () {
                    $(this).on('click', function () {
                        $(this).closest('li').click();
                    });
                });
                //fire event to open branch if the li contains an anchor instead of text
                //      tree.find('.branch>a').each(function() {
                //    $(this).on('click', function(e) {
                //     $(this).closest('li').click();
                //        e.preventDefault();
                //      });
                //   });
                //fire event to open branch if the li contains a button instead of text
                //   tree.find('.branch>button').each(function() {
                //$(this).on('click', function(e) {
                //   $(this).closest('li').click();
                //              e.preventDefault();
                //         });
                //       });
            }
        });

        //Initialization of treeviews

        $('#tree1').treed();

        $('#tree2').treed({ openedClass: 'glyphicon-folder-open', closedClass: 'glyphicon-folder-close' });

        $('#tree3').treed({ openedClass: 'glyphicon-chevron-right', closedClass: 'glyphicon-chevron-down' });
    </script>

   
   
</body>